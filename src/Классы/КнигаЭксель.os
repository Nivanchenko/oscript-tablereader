#Использовать tempfiles

Перем КаталогРазобранныхФайлов;
Перем ПутьДоФайла;
Перем Листы;
Перем ХранилищеОбщихСтрок;
Перем СтилиДат;

Процедура ПриСозданииОбъекта(ПутьДоТаблицы = Неопределено, КаталогРазборки = Неопределено)

	ПутьДоФайла = ПутьДоТаблицы;
	КаталогРазобранныхФайлов = КаталогРазборки;

КонецПроцедуры

Функция КоличествоЛистов() Экспорт
	Возврат Листы.Количество();
КонецФункции

Функция ЛистПоНомеру(НомерЛиста) Экспорт
	Возврат ПолучитьЛист("Номер", НомерЛиста);	
КонецФункции

Функция ЛистПоИмени(ИмяЛиста) Экспорт
	Возврат ПолучитьЛист("Имя", ИмяЛиста);	
КонецФункции

Процедура Прочитать() Экспорт

	Если не ЗначениеЗаполнено(ПутьДоФайла) Тогда
		ВызватьИсключение "Не указан файл для чтения";
	КонецЕсли;

	Если не ЗначениеЗаполнено(КаталогРазобранныхФайлов) Тогда
		КаталогРазобранныхФайлов = ВременныеФайлы.СоздатьКаталог("exel");
	КонецЕсли;

	Чтение = Новый ЧтениеZipФайла(ПутьДоФайла);
	Чтение.ИзвлечьВсе(КаталогРазобранныхФайлов);
	Чтение.Закрыть();

	ПрочитатьЛисты();

	УдалитьФайлы(КаталогРазобранныхФайлов);
	
КонецПроцедуры

Функция ПолучитьОбщуюСтроку(Индекс) Экспорт

	Возврат ХранилищеОбщихСтрок.Получить(Индекс);
	
КонецФункции

Процедура УстановитьФайл(ПутьДоТаблицы) Экспорт

	ПутьДоФайла = ПутьДоТаблицы;	
	
КонецПроцедуры

Процедура УстановитьКаталогРазборки(КаталогРазборки) Экспорт

	КаталогРазобранныхФайлов = КаталогРазборки;

КонецПроцедуры

Процедура ИнициализироватьТаблицуЛистов()
	Листы = Новый ТаблицаЗначений();
	Листы.Колонки.Добавить("Лист");
	Листы.Колонки.Добавить("Имя");
	Листы.Колонки.Добавить("Номер");
КонецПроцедуры

Функция ПолучитьЛист(Фильтр, Значение) 
	Найденные = Листы.НайтиСтроки(Новый Структура(Фильтр, Значение));
	
	Если Найденные.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Найденные[0].Лист;
	КонецЕсли;
КонецФункции

Процедура ПрочитатьЛисты()

	КаталогКниги = ОбъединитьПути(КаталогРазобранныхФайлов, "xl");
	КаталогЛистов = ОбъединитьПути(КаталогКниги, "worksheets");
	ФайлыЛистов = НайтиФайлы(КаталогЛистов, "*.xml", Ложь);

	ПрочитатьОбщиеСтроки(ОбъединитьПути(КаталогКниги, "sharedStrings.xml"));
	ПрочитатьСтилиДат(ОбъединитьПути(КаталогКниги, "styles.xml"));

	ФайлОписанияЛистов = ОбъединитьПути(КаталогКниги, "workbook.xml");
	ИменаЛистов = ПрочитатьИменаЛистов(ФайлОписанияЛистов);

	ИнициализироватьТаблицуЛистов();

	Для Счетчик = 1 По ФайлыЛистов.Количество() Цикл
		НовыйЛист = Листы.Добавить();
		НовыйЛист.Номер = Счетчик;
		НовыйЛист.Имя = ИменаЛистов[Счетчик];
		НовыйЛист.Лист = Новый ЛистЭксель(НовыйЛист.Имя, Счетчик, ФайлыЛистов[Счетчик-1].ПолноеИмя, ЭтотОбъект);	
		НовыйЛист.Лист.Прочитать();
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоСтильДаты(ИдСтиля) Экспорт

	Возврат НЕ СтилиДат.Найти(ИдСтиля) = Неопределено;
	
КонецФункции

Процедура ПрочитатьСтилиДат(ПутьКСтилям)
	ФорматыДат = Новый Массив;
	ФорматыДат.Добавить("14");

	ВсеСтили = Новый Массив();

	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(ПутьКСтилям);

	НашлиСтили = Ложь;

	Пока Чтение.Прочитать() Цикл
		Если Чтение.Имя = "numFmt" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Атрибуты = ПрочитатьАтрибуты(Чтение);	
			Форматирование = Атрибуты["formatCode"];
			Если Не Форматирование = Неопределено 
				и (СтрНайти(Форматирование, "dd") > 0 
					ИЛИ СтрНайти(Форматирование, "d-") > 0
					ИЛИ СтрНайти(Форматирование, "d\") > 0) Тогда
				ФорматыДат.Добавить(Атрибуты["numFmtId"]);	
			КонецЕсли;

		ИначеЕсли Чтение.Имя = "cellXfs" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда	
			НашлиСтили = Истина;

		ИначеЕсли Чтение.Имя = "cellXfs" и Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда	
			НашлиСтили = Ложь;

		ИначеЕсли Чтение.Имя = "xf" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента и НашлиСтили Тогда
			Атрибуты = ПрочитатьАтрибуты(Чтение);
			ВсеСтили.Добавить(Атрибуты["numFmtId"]);

		КонецЕсли;
	КонецЦикла;

	Чтение.Закрыть();
	
	СтилиДат = Новый Массив();

	Для Счетчик = 0 По ВсеСтили.Количество() - 1 Цикл
		ТекСтиль = ВсеСтили.Получить(Счетчик);
		НайденСтиль = ФорматыДат.Найти(ТекСтиль);
		Если Не НайденСтиль = Неопределено Тогда
			СтилиДат.Добавить(Строка(Счетчик));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьОбщиеСтроки(ПутьКОбщимСтрокам)

	ХранилищеОбщихСтрок = Новый Массив;

	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(ПутьКОбщимСтрокам);

	Пока Чтение.Прочитать() Цикл
		Если Чтение.Имя = "t" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Чтение.Прочитать();
			ХранилищеОбщихСтрок.Добавить(Чтение.Значение);
		КонецЕсли;
	КонецЦикла;

	Чтение.Закрыть();

КонецПроцедуры

Функция ПрочитатьИменаЛистов(ПутьКФайлуОписания)

	ИменаЛистов = Новый Соответствие();

	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(ПутьКФайлуОписания);

	Пока Чтение.Прочитать() Цикл

		Если Чтение.Имя = "sheet" и Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ИмяЛиста = "";
			ИдЛиста = 0;
			Пока Чтение.ПрочитатьАтрибут() Цикл
				Если Чтение.Имя = "name" Тогда
					ИмяЛиста = Чтение.Значение;
				ИначеЕсли Чтение.Имя = "sheetId" Тогда 
					ИдЛиста = Чтение.Значение;
				КонецЕсли;
			КонецЦикла;
			ИменаЛистов.Вставить(Число(ИдЛиста), ИмяЛиста);
		КонецЕсли;
	КонецЦикла;
	Чтение.Закрыть();
	Возврат ИменаЛистов;
КонецФункции

Функция ПрочитатьАтрибуты(Чтение)
	Атрибуты = Новый Соответствие();
	Пока Чтение.ПрочитатьАтрибут() Цикл
		Атрибуты.Вставить(Чтение.Имя, Чтение.Значение);
	КонецЦикла;
	Возврат Атрибуты;
КонецФункции